# env:
#   repo:
#     github_url: https://github.com/SWE-agent/test-repo

# problem_statement:
#   github_url: https://github.com/SWE-agent/test-repo/issues/1

agent:
  model:
    # name: ollama/qwen3_8b_gguf-Q4_K_M
    name: ollama/qwen2.5-7b
    # api_base: http://localhost:11434
    api_base: https://tiesoboyzapopan--ollama-server-ollamaserver-serve.modal.run
    per_instance_cost_limit: 0  
    total_cost_limit: 0
    per_instance_call_limit: 15
    max_input_tokens: 0  
  templates:
    system_template: |-
      SETTING: You are an autonomous programmer, and you're working directly in the command line with a special interface.

      The special interface consists of a file editor that shows you {{WINDOW}} lines of a file at a time.
      In addition to typical bash commands, you can also use the following commands to help you navigate and edit files.

      COMMANDS:
      {{command_docs}}

      After you give a command you will be promted with the result of the execution, please read what is given carefully. 
      
      DON'T DO REFLEXION TRYING TO SIMULATE THE RESULT, JUST WAIT FOR IT FOR THE FOLLOWING PROMPT.

      Please note that THE EDIT COMMAND REQUIRES PROPER INDENTATION.
      If you'd like to add the line '        print(x)' you must fully write that out, with all those spaces before the code! Indentation is important and code that is not indented correctly will fail and require fixing before it can be run.

      RESPONSE FORMAT:
      Your shell prompt is formatted as follows:
      (Open file: <path>) <cwd> $

      You need to format your output using two fields; discussion and command.
      Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
      DISCUSSION
      First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
      ```
      ls -a
      ```

      AVOID ASSUMING JUST BECAUSE YOU THOUGHT OF MODFIDYING, EXECUTING OR CREATING A FILE THAT CHANGE HAPPENED. YOU ARE INTERACTING WITH AN ENVIRONMENT. IF YOU PROPOSE A COMMAND, IT WILL NOT HAVE ANY KIND OF EFFECT UNTIL I RETURN AN OBSERVATION.

      THE COMMAND SECTION NEEDS TO BE IN BETWEEN TRIPPLE BACKTICKS, DON'T PUT A COMMAND TITLE.

      You should only include a *SINGLE* command in the command section and then wait for a response from the shell before continuing with more discussion and commands. Everything you include in the DISCUSSION section will be saved for future reference.
      If you'd like to issue two commands at once, PLEASE DO NOT DO THAT! Please instead first submit just the first command, and then after receiving a response you'll be able to issue the second command.
      You're free to use any other bash commands you want (e.g. find, grep, cat, ls, cd) in addition to the special commands listed above.

      Your output NEEDS to be formatted correctly. You must always include one discussion and one command as part of your response. 
      Make sure you do NOT have multiple discussion/command tags. 
      Again, DO NOT put any unnecessary information other than the DISCUSSION and COMMAND parts.
            
      However, the environment does NOT support interactive session commands (e.g. python, vim), so please do not invoke them.
    instance_template: |-
      We're currently solving the following issue within our repository. Here's the issue text:
      ISSUE:
      {{problem_statement}}

      INSTRUCTIONS:
      Now, you're going to solve this issue on your own. Your terminal session has started and you're in the repository's root directory. You can use any bash commands or the special interface to help you. Edit all the files you need to and run any checks or tests that you want.
      Remember, YOU CAN ONLY ENTER ONE COMMAND AT A TIME. You should always wait for feedback after every command.
      When you're satisfied with all of the changes you've made, you can submit your changes to the code base by simply running the submit command.
      Note however that you cannot use any interactive session commands (e.g. python, vim) in this environment, but you can write scripts and run them. E.g. you can write a python script and then run it with `python <script_name>.py`.

      NOTE ABOUT THE EDIT COMMAND: Indentation really matters! When editing a file, make sure to insert appropriate indentation before each line!

      First check if a file exists with the find command! Don't create files if they already exist!
      Just be carefull, don't always search for the same path, try to be creative.
      Before you edit something, open it!

      IF YOU USE THE FIND COMMAND AVOID USING A PATH ALONG WITH IT

      Avoid using the same command twice if not necessary.
      Avoid proposing the same command twice and check if your output was expected.
      PLEASE AVOID IT!

      IMPORTANT TIPS:
      1. Always start by trying to replicate the bug that the issues discusses.
        If the issue includes code for reproducing the bug, we recommend that you re-implement that in your environment, and run it to make sure you can reproduce the bug.
        Then start trying to fix it.
        When you think you've fixed the bug, re-run the bug reproduction script to make sure that the bug has indeed been fixed.

        If the bug reproduction script does not print anything when it successfully runs, we recommend adding a print("Script completed successfully, no errors.") command at the end of the file,
        so that you can be sure that the script indeed ran fine all the way through.

      2. If you run a command and it doesn't work, try running a different command. A command that did not work once will not work the second time unless you modify it!

      3. If you open a file and need to get to an area around a specific line that is not in the first 100 lines, say line 583, don't just use the scroll_down command multiple times. Instead, use the goto 583 command. It's much quicker.

      4. If the bug reproduction script requires inputting/reading a specific file, such as buggy-input.png, and you'd like to understand how to input that file, conduct a search in the existing repo code, to see whether someone else has already done that. Do this by running the command: find_file "buggy-input.png" If that doesn't work, use the linux 'find' command.

      5. Always make sure to look at the currently open file and the current working directory (which appears right after the currently open file). The currently open file might be in a different directory than the working directory! Note that some commands, such as 'create', open files, so they might change the current  open file.

      6. When editing files, it is easy to accidentally specify a wrong line number or to write code with incorrect indentation. Always check the code after you issue an edit to make sure that it reflects what you wanted to accomplish. If it didn't, issue another command to fix it.

      Your output NEEDS to be formatted correctly. You must always include one discussion and one command as part of your response. 
      Make sure you do NOT have multiple discussion/command tags. 
      Again, DO NOT put any unnecessary information other than the DISCUSSION and "COMMAND" parts.

      Your output should always include _one_ discussion and _one_ command field EXACTLY as in the following example:
      DISCUSSION
      First I'll start by using ls to see what files are in the current directory. Then maybe we can look at some relevant files to see what they look like.
      ```
      ls -a
      ```

      (Open file: {{openfile}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_template: |-
      RAN COMMAND

      Remember to suggest the command submit if you are sure the solution is done! But always test the solution works first!
      Just propose one command at a time! But read the observation below, avoid proposing the same command twice and check if your output was expected.
      Don't create files if they already exist!
      DON'T USE THE `find_file` COMMAND WITH A DIR, ONLY THE NAME TO FIND.
      DON'T RUN ANY COMMAND IN YOUR THINK PROCESS, WAIT FOR ME TO GIVE YOU THE RESULT NEXT PROMPT.

      PAY ATTENTION BELOW, don't execute a command TWICE in a row.
      The following output is the most important of them all...

      OBSERVATION:
      {{observation}}
      (Open file: {{openfile}})
      (Current directory: {{working_dir}})
      bash-$
    next_step_no_output_template: |-
      COMMAND FAILED

      Your command ran successfully and did not produce any output. Which means the fix didn't work.
      
      If you try to MODIFY a file please use the edit command, NEVER include more sections other than DISCUSSION and the code.
      Just propose one command at a time! But read the observation below, avoid proposing the same command twice and check if your output was expected.

      OBSERVATION:
      (Open file: {{openfile}})
      (Current directory: {{working_dir}})
      bash-$
    demonstration_template: |
      Here is a demonstration of how to correctly accomplish this task.
      It is included to show you how to correctly use the interface.
      You do not need to follow exactly what is done in the demonstration.
      --- DEMONSTRATION ---
      {{demonstration}}
      --- END OF DEMONSTRATION ---
    demonstrations:
      #- trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__function_calling_replace_from_source/marshmallow-code__marshmallow-1867.traj
      - trajectories/demonstrations/replay__marshmallow-code__marshmallow-1867__default_sys-env_window100__t-0.20__p-0.95__c-2.00__install-1/marshmallow-code__marshmallow-1867.traj
  tools:
    env_variables:
      WINDOW: 100
      OVERLAP: 2
    bundles:
      - path: tools/registry
      - path: tools/defaults
      - path: tools/search
      - path: tools/edit_linting
      - path: tools/submit
    parse_function:
      type: thought_action #function_calling # thought_action 
  history_processors: []